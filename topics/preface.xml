<preface>
  <title>
    Who should read this book
  </title>

  <para>
    This book is intended for <ulink
    url="https://www.raspberrypi.org/learning/getting-started-with-scratch/worksheet">Scratch</ulink>
    users who are looking to graduate to a more advanced programming
    environment to make even more advanced games. It is written for
    <emphasis>both</emphasis> students and teachers, because
    everyone&#39;s a student at some point, and everyone can become a
    teacher.
  </para>

  <para>
    <ulink url="https://www.python.org/">Python</ulink> is a popular
    open source language that is used in the majority of tech
    industries, including 3d modeling, filmmaking, desktop
    applications, IT, web development, security, video games, and <ulink
    url="https://wiki.python.org/moin/OrganizationsUsingPython">many
    non-tech industries</ulink> including financial, science,
    education, and government. It&#39;s an important language to
    learn, but it&#39;s also one of the easiest languages to learn
    because it&#39;s designed specifically to be clear and simple.
  </para>

  <section id="preface_ready">
    <title>Are you ready for Python?</title>
    
  <para>
    While Python is simpler than an advanced language like C++,
    it&#39;s also a serious, professional-level language. It requires
    you to type out code, to keep files organised, and to debug.
  </para>

  <para>
    Everyone has their own programming style, so there&#39;s no
    way to tell you exactly how you know when you&#39;re ready to
    graduate to Python. Here are some traits of a Scratch user who is
    probably ready to graduate to Python&#58;
  </para>

  <itemizedlist>
    <listitem>
      <para>
	Your games are getting too big or too complex for Scratch.
      </para>
    </listitem>

    <listitem>
      <para>
	You are comfortable using variables in Scratch.
      </para>
    </listitem>
	
    <listitem>
      <para>
	You find dragging and dropping blocks in Scratch slow and
	inefficient, and frequently look for ways to build your
	scripts faster.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    If any of those characteristics are familiar to you, then you are
    probably ready to tackle Python. However, you shouldn&#39;t feel
    that you <emphasis>have to</emphasis> start Python unless you want
    to. While it&#39;s true that you aren&#39;t going to get any jobs
    making games if all you know is Scratch, it&#39;s also true that
    Scratch is a lot of fun, and very powerful. Python is fun, too,
    and it does get easier, but it starts out hard. It takes work, and
    lots of practise. The most important thing is to keep programming
    fun, and you&#39;re free to move at your own pace. 
  </para>

  <para>
    The good news is that once you get used to it, it&#39;s easy, fun,
    and it&#39;ll make it easier for you to get a job in the industry
    of your choice. Even if the company you want to work for
    doesn&#39;t use Python, knowing Python makes it a breeze to learn
    something knew like Lua, C++, and other languages.
  </para>
  
  <para>
    If you are ready to learn something new, then this book is for
    you.
  </para>
  
  </section>

  <section id="preface_teacher">
    <title>For teachers</title>

    <para>
      This book can be used as a lesson plan, with each chapter
      representing one full class session. The principles in the book
      build upon one another, so start at the beginning, don&#39;t
      rush, and by the end, your students should be able to create
      code with no further instruction from you.
    </para>

    <para>
      This course has been used as the lesson plan in a class for
      children in year 5 and 6 &#40;ages 12-14&#41; by <ulink
      url="http://makerbox.org.nz">Makerbox</ulink> at Rata Studios in
      New Zealand, with great success. The feedback from its initial
      run has been incorporated in this edition.
    </para>

    <para>
      If you don&#39;t know Python yourself, provide twice the amount
      of time for each lesson. Teach the lesson as written, and learn
      Python along with your students. Tell them that you are also
      learning, and encourage collaboration in the classroom. Working
      together on a problem is what <ulink
      url="https://opensource.com/resources/what-open-source">open
      source</ulink> is all about. 
    </para>
  </section>

  <section id="preface_students">
    <title>For students</title>

    <para>
      Learning new stuff is hard, especially when you&#39;re already really
      good at something. If you&#39;re looking at this book, then
      you probably know Scratch like the back of your hand. When you
      start learning Python, you&#39;re going to feel like you&#39;ve
      taken a huge step backward.
    </para>

    <para>
      Take a moment to think back to when you were first learning
      Scratch. You didn&#39;t know you had to start with a specific
      block so that the game would start when the green flag was
      clicked, you didn&#39;t know the difference between an
      if&#47;then and an forever-if block, or even how to get the cat
      to move 10 steps.
    </para>

    <para>
      In learning Python, you&#39;re returning to that same place&#58;
      the very beginning. At first, it will be frustrating that you
      don&#39;t know how to do even simple tasks, and even once you
      start making things happen, it will take a long time. You
      don&#39;t even get a moving hero sprite until <xref linkend="move"/>.
    </para>

    <para>
      So why bother learning Python?
    </para>

    <para>
      The thing about Python is that once you learn how it works, you
      can do anything with it. You can make games, you can script 3d
      games, you can write desktop applications, web sites, and much
      more. Later in life, when you&#39;re looking for a job, knowing
      Python just might be the reason you get hired, and even if a
      company doesn&#39;t use Python, you can learn new languages
      easily because you&#39;ll already know how programming languages
      work.
    </para>

    <para>
      In the video game industry, you hear a lot about applications
      like Unity and Unreal Engine, and you probably want to learn
      those as soon as possible. While those are great applications to
      know, don&#39;t rush into them. These kinds of game engines are
      important, but they require a basic knowledge of programming
      first. You don&#39;t have to learn Python before using a big
      game engine, but you do have to learn programming.
    </para>

    <para>
      Python is an easy way to learn programming, and a gateway to
      more advanced languages.
    </para>
    
  </section>
  
</preface>


