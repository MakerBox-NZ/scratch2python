<chapter id="world">
  <title>
    Creating the game world
  </title>

  <para>
    A video game needs a <firstterm>setting</firstterm>, a world in
    which it takes place. In Scratch, you create a world by putting a
    costume on the stage.
  </para>

  <mediaobject>
  <info>
    <othercredit>
      <orgname>MakerBox</orgname>
    </othercredit>
    <othercredit>
      <orgname>MIT</orgname>
    </othercredit>
  </info>
  <alt>The Scratch stage</alt>
  <imageobject>
    <imagedata align="left" format="JPG"
	       fileref="topics/images/stage.jpg"/>
  </imageobject>
  <textobject>
    <para>
      The stage in Scratch.
    </para>
  </textobject>
</mediaobject>

<para>
  In Python, you can create your setting in two different ways.
</para>

<orderedlist>
  <listitem>
    <para>
      Set a background colour.
    </para>
  </listitem>
  <listitem>
    <para>
      Set a background image.
    </para>
  </listitem>
</orderedlist>

<para>
  Your background is only an image or colour. Your video game
  characters are not able to interact with things in the background,
  so don&#39;t put anything too important back there. It&#39;s just
  set dressing.
</para>

<section id="world_setup">
  <title>Setting up your Pygame script</title>

  <para>
    To start a new Pygame project, create a folder on your
    computer. All of your game files go into this directory. It&#39;s
    vitally important that you keep all the files needed to run your
    game inside of your project folder.
  </para>

    <mediaobject>
    <info>
    <othercredit>
      <orgname>MakerBox</orgname>
    </othercredit>
    <othercredit>
      <orgname>Red Hat</orgname>
    </othercredit>
  </info>
  <alt>Create a project directory</alt>
  <imageobject>
    <imagedata align="left" format="JPG"
	       fileref="topics/images/project.jpg"/>
  </imageobject>
  <textobject>
    <para>
      Create a project directory to keep your files organised.
    </para>
  </textobject>
  </mediaobject>
  
  <para>
    A Python script starts with the file type, your name, and the license
    you want to use. Use an open source license so that your friends can
    improve your game and share their changes with you&#58;
  </para>

<programlisting><![CDATA[
#!/usr/bin/env python3
# by Seth Kenlon

## GPLv3
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
]]></programlisting>

<para>
  Then, you tell Python what modules you want to use. Remember,
  modules are like sets of Scratch blocks.
</para>

<programlisting><![CDATA[
import pygame # load pygame keywords
import sys    # let  python use your file system
import os     # help python identify your OS
]]></programlisting>

<para>
  Since you&#39;ll be working a lot with this script file, it helps to
  give yourself sections within the file so you know where to put
  stuff. You do this with block comments, which are comments that only
  you, the programmer, sees. Create three blocks in your code.
</para>

<programlisting><![CDATA[
'''
Objects
'''

# put Python classes and functions here

'''
Setup
'''

# put run-once code here

'''
Main Loop
'''

# put game loop here
]]></programlisting>

<para>
  Next, set the window size for your game. Keep in mind that not
  everyone has a big computer screen, so it&#39;s best to use a screen
  size that fits on most people&#39;s computers.
</para>

<programlisting><![CDATA[
'''
Setup
'''
screenX = 960
screenY = 720
]]></programlisting>

<para>
  The Pygame engine requires some basic setup before you can use it in
  a script. You must set the frame rate, start its internal clock, and
  start &#40;init&#41; Pygame.
</para>

<programlisting><![CDATA[
fps = 40   # frame rate
afps = 4   # animation cycles
clock = pygame.time.Clock()
pygame.init()
]]></programlisting>

<para>
  In Scratch, to activate a script, you use the <firstterm>When green
  flag is clicked</firstterm> block.
</para>

  <mediaobject>
    <info>
    <othercredit>
      <orgname>MakerBox</orgname>
    </othercredit>
    <othercredit>
      <orgname>MIT</orgname>
    </othercredit>
  </info>
  <alt>When green flag is clicked</alt>
  <imageobject>
    <imagedata align="left" format="JPG"
	       fileref="topics/images/flag.jpg"/>
  </imageobject>
  <textobject>
    <para>
      In Scratch, the green flag block activates a script.
    </para>
  </textobject>
  </mediaobject>

<para>
  In Python, you don&#39;t have a green flag block, but you can use a
  keyword. A common keyword is <code>main</code>. If <code>main</code>
  is <code>True</code>, then the game is on. If <code>main</code> is
  not True, then the game has stopped.
</para>

<para>
  Add the last line shown in this code sample to yours&#58; 
</para>

<programlisting><![CDATA[
fps = 40   # frame rate
afps = 4   # animation cycles
clock = pygame.time.Clock()
pygame.init()
main = True
]]></programlisting>

<para>
  Now you can set your background.
</para>

<section id="world_backdrop">
  <title>Setting the background</title>

  <para>
    Scratch already knows what the <emphasis>stage</emphasis> is, but
    Python does not. Outside of Scratch, most video games just call
    the stage the &#34;screen&#34;.
  </para>

  <para>
    Before you continue, open a graphics application and create a
    background for your game world. Save it as
    <filename>stage.png</filename> inside of a folder called <filename>images</filename> in your project directory.
  </para>

  <para>
    There are several free graphics applications you can use.
  </para>

  <variablelist>
    <title>Open source graphics applications</title>

    <varlistentry>
      <term>Krita</term>
      
    <listitem>
      <para>
	A professional-level paint materials emulator. Beautiful
	images can be made with <ulink
	url="http://krita.org">Krita</ulink>.
      </para>
    </listitem>

    </varlistentry>

        <varlistentry>
      <term>Pinta</term>
      
    <listitem>
      <para>
	<ulink
	url="https://pinta-project.com/pintaproject/pinta/releases">Pinta</ulink>
	is a basic paint application. Easy to learn.
      </para>
    </listitem>

	</varlistentry>

	<varlistentry>
	  <term>Inkscape</term>
      
	  <listitem>
	    <para>
	      <ulink url="http://inkscape.org">Inkscape</ulink> is a vector
	      graphics application. Draw with shapes, lines, splines, and
	      B&#233;zier curves.
	    </para>
	  </listitem>
	  
	</varlistentry>
	
  </variablelist>

  <para> Your graphic doesn&#39;t have to be complex, and you can
  always go back and change it later. Once you have it, add this code
  in the setup section of your file&#58;
  </para>
  
  <programlisting><![CDATA[
    screen   = pygame.display.set_mode([screenX,screenY])
    backdrop = pygame.image.load(os.path.join('images','stage.png').convert()
    backdropRect = screen.get_rect()
  ]]></programlisting>

  <para>
    If you&#39;re just going to fill the background of your game
    screen with a colour, all you need is&#58;
  </para>

  <programlisting><![CDATA[
    screen   = pygame.display.set_mode([screenX,screenY])
  ]]></programlisting>
    
  <para>
    At this point, you could theoretically start your game. The
    problem is, it would only last for a millisecond.
  </para>

  <para>
    To prove that this is the case, save your file as
    <filename>your-name_game.py</filename> &#40;replace
    <replaceable>your-name</replaceable> with your actual
    name&#41;. Then launch your game.
  </para>

  <para>
    If you are using IDLE, run your game by selecting <guimenuitem>Run
    Module</guimenuitem> from the <guimenu>Run</guimenu> menu.
  </para>

  <pare>
    If you are using Ninja, click the <guibutton>Run file</guibutton>
    button in the left button bar.
  </pare>

<mediaobject>
  <info>
    <othercredit>
      <orgname>MakerBox</orgname>
    </othercredit>
    <othercredit>
      <orgname>MIT</orgname>
    </othercredit>
  </info>
  <alt>Run file in Ninja.</alt>
  <imageobject>
    <imagedata align="left" format="PNG"
	       fileref="topics/images/ninja_run.png"/>
  </imageobject>
  <textobject>
    <para>
      Running a file in Ninja.
    </para>
  </textobject>
</mediaobject>


    
  <para>
    You can also run a Python script straight from a UNIX terminal or
    a Windows command prompt.
  </para>
  
  <programlisting><![CDATA[
    $ python3 ./your-name_game.py
  ]]></programlisting>

  <para>
    If you&#39;re using Windows, use this command&#58;
  </para>

  <programlisting><![CDATA[
    py.exe your-name_game.py
  ]]></programlisting>

  <para>
    However you launch it, don&#39;t expect much, because your game
    only lasts a millisecond right now. Fix that in the next section.
  </para>
  
</section>

<section id="world_loop">
  <title>Looping</title>

  <para>
    Unless told otherwise, a Python script runs once and only
    once. Computers are very fast these days, so your Python script
    runs in less than a second.  
  </para>

  <qandaset>
    <qandaentry>
      <question>
	<para>What code block in Scratch makes a script repeat
	something infinitely?</para>
	</question>
	<answer>
	  <para>The forever loop.</para>
	</answer>
    </qandaentry>
  </qandaset>

  <para>
    To force your game to stay open and active long enough for someone
    to see it, let alone play it, use a <firstterm>while</firstterm>
    loop. While <code>main</code> is True, the game stays open.
  </para>

  <para>
    During the main loop, use Pygame keywords to detect if keys on the
    keyboard have been pressed or released.
  </para>

    <qandaset>
    <qandaentry>
      <question>
	<para>What would be a useful function for your game to have
	even though there&#39;s nothing in your game yet?
	</para>
	</question>
	<answer>
	  <para>A key pressed to quit.</para>
	</answer>
    </qandaentry>
  </qandaset>

<programlisting><![CDATA[
'''
Main loop
'''
while main == True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit(); sys.exit()
            main = False

        if event.type == pygame.KEYDOWN:
            if event.key == ord('q'):
                pygame.quit()
                sys.exit()
                main = False
]]></programlisting>

<para>
  Also in your main loop, refresh your screen&#39;s background.
</para>

<itemizedlist>
  <listitem>
    <para>
      If you are using an image&#58;
    </para>

<programlisting><![CDATA[
    screen.blit(backdrop, backdropRect)
]]></programlisting>
  </listitem>
  <listitem>
    <para>
      If you are just using a colour for the background&#58;
    </para>

<programlisting><![CDATA[
    screen.fill(black)
]]></programlisting>
  </listitem>
</itemizedlist>

<para>
  Finally, tell Pygame to refresh everything on the screen, and
  advance the game&#39;s clock.
</para>

<programlisting><![CDATA[
    pygame.display.flip()
    clock.tick(fps)
]]></programlisting>

<para>
  Save your file, and run it again to see the most boring game ever
  created.
</para>

<para>
  To quit the game, press <keycode>q</keycode> on your keyboard.
</para>
</section>

</section>
</chapter>
