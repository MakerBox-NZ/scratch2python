<chapter id="collision">
  <title>
    Simulating collisions
  </title>

  <para>
    In a simple video game, the two most important aspects of physics
    are gravity and collision. You have all ready implemented gravity
    in your game, so now it&#39;s time to simulate collision.
  </para>

    <qandaset>
    <qandaentry>
      <question>
	<para>
	  What is a collision? Can you think of some everyday
	  collisions that happen?
	</para>
      </question>
      <answer>
	<para>
	  A collision is when two objects touch. A collision happens
	  when you jump on a trampoline, or when a cricket bat hits a
	  cricket ball, or even when you're just walking to school.
	</para>
      </answer>
    </qandaentry>
  </qandaset>

  <para>
    For your side-scroller to work, you simulated gravity so that your
    player falls toward your game world&#39;s Earth just as objects do
    in real life, but now you must simulate collisions so that your
    player doesn&#39;t fall <emphasis>through</emphasis> solid
    objects.
  </para>

  <section id="collision_solid">
    <title>Making solid objects</title>

    <para>
      Collisions are used for many things. In movement, a collision
      usually signals a <emphasis>stop</emphasis>. That's what a
      collision against gravity does&#58; if your player hits the
      ground, then your player stops falling.
    </para>
      
    <qandaset>
    <qandaentry>
      <question>
	<para>
	  How does Scratch check for collisions?
	</para>
      </question>
      <answer>
	<para>
	  Forever if &#62; touching
	</para>
      </answer>
    </qandaentry>
  </qandaset>

  <mediaobject>
    <info>
      <othercredit>
	<orgname>MakerBox</orgname>
      </othercredit>
      <othercredit>
	<orgname>MIT</orgname>
      </othercredit>
    </info>
    <alt>Collision detection in Scratch</alt>
    <imageobject>
      <imagedata align="left" format="JPG"
		 fileref="topics/images/collide.jpg"/>
    </imageobject>
    <textobject>
      <para>
	Collisions in Scratch are special sensing blocks, usually in a loop.
      </para>
    </textobject>
  </mediaobject>

  <para>
    In Pygame, collisions are detected with the special keyword
    <code>spritecollide</code>. You tell Python to check for any
    collisions, and if there are collisions, then to react in some
    way.
  </para>

  <para>
    In order for Python to be able to check for a collision between
    two objects, it needs to know what two objects &#40;or group of
    objects&#41; to check.
  </para>
  
  <para>
    In your player&#39;s <code>update</code> function, add this
    code&#58;
  </para>

<programlisting><![CDATA[
        # collisions
        block_hit_list = pygame.sprite.spritecollide(self, blocker, False)
        if self.momentumX > 0:
            for block in block_hit_list:
                self.rect.y = currentY
                self.rect.x = currentX+9
                self.momentumY     = 0

        if self.momentumY > 0:
            for block in block_hit_list:
                self.rect.y = currentY
                self.momentumY     = 0
]]></programlisting>

<para>
  This code checks for collisions between your player sprite and any
  object in the <code>platform_list</code> group. That means that any
  time your player touches a platform, a collision happens.
</para>

<para>
  When a collision between these objects is detected, you tell Python
  to set your player&#39;s Y position to where ever it is now, and to
  change it momentum to 0. With these settings, your player is no
  longer subject to gravity&#59; it is no longer falling. But the
  moment your player stops touching a platform, gravity kicks back in
  and pulls the player sprite down.
</para>

<para>
  If you try to launch your game now, it will crash.
</para>

<programlisting><![CDATA[
  <prompt>&#36;</prompt> <command>python</command> ./your-name_game.py
  <computeroutput>
    Traceback (most recent call last):
  File "./your-name_game.py", line 183, in &#60;module&#62;
    player.update() # refresh player
    TypeError: update() takes exactly 2 arguments (1 given)
  </computeroutput>
]]></programlisting>

<para>
  Your player sprite's new update function needs to know what the
  current list of platforms is. Remember, in complex games you might
  have a different platform list for each level, so you have to feed
  the current list to the <code>player.update</code> function.
</para>

<para>
  Near the bottom of your script, change the
  <code>player.update</code> call to this &#40;change the middle line&#41;&#58;
</para>

<programlisting><![CDATA[
    player.gravity()
    player.update(platform_list) # update and collision
    movingsprites.draw(screen)
]]></programlisting>

<para>
  Now launch your game. Your player successfully resists the pull of
  gravity by colliding with the ground.
</para>

  </section>
  </chapter>
