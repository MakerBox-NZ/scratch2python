<chapter id="scroll">
  <title>
    Putting the scroll in side-scroller
  </title>

  <para>
    Back when you designed your level design layout, you probably had
    some portion of your level extend past your viewable screen. The
    ubiquitous solution to that problem is, as the term
    &#34;side-scroller&#34; suggests, scrolling.
  </para>

  <para>
    The key to scrolling is to make the platforms
    <emphasis>around</emphasis> the player sprite move when the player
    sprite gets close to the edge of the screen. This provides the
    illusion that the screen is a &#34;camera&#34; panning across the
    game world.
  </para>

  <para>
    This scrolling trick requires two deadzones at which point your
    avatar stands still while the world scrolls by. You need a trigger
    point to go forward, and another if you want to enable
    your player to go backward.
  </para>

  <para>
    These two points are just two variables. Set them each about 100
    or 200 pixels from each screen edge. Create these variables in
    your setup section. In the following code, the first two lines are
    for context, so just add the last two lines&#58;
  </para>

<programlisting><![CDATA[
movingsprites.add(player)
movesteps = 10
forwardX  = 600     # when to scroll
backwardX = 230     # when to scroll    
]]></programlisting>

<para>
  In the main loop, check to see if your player sprite is at the
  <varname>forwardX</varname> or <varname>backwardX</varname> scroll
  point. If so, move all platforms either left or right, depending on
  whether the world is moving forward or backwards.
</para>

<para>
  In the following code, the final 4 lines of code are for
  reference&#58;
</para>

<programlisting><![CDATA[
    # scroll the world forward
    if player.rect.x >= forwardX:
        scroll = player.rect.x - forwardX
        player.rect.x = forwardX
        for platform in platform_list:
            platform.rect.x -= scroll

    # scroll the world backward
    if player.rect.x <= backwardX:
        scroll = min(1,(backwardX - player.rect.x))
        player.rect.x = backwardX
        for platform in platform_list:
            platform.rect.x += scroll

    ## scrolling code above
    screen.blit(backdrop, backdropRect)
    platform_list.draw(screen)
    player.gravity()
    player.update(platform_list)
]]></programlisting>

<para>
  In this code, scrolling backwards is enabled, but at a logarithmic
  rate. In other words, the player sprite can go back, but the
  scrolling happens slower than going forward. If you don&#39;t want
  that effect, don&#39;t use the <code>min</code> keyword.
</para>
  
<para>
  Launch your game and try it out.
</para>

</chapter>
