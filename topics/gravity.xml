<chapter id="gravity">
  <title>
    Simulating gravity
  </title>

  <para>
    The real world is full of movement and life. The thing that makes
    the real world so busy and dynamic is
    <firstterm>physics</firstterm>. Physics is the way matter moves
    through space. Since a video game world has no matter, it also has
    no physics, so game programmers have to
    <emphasis>simulate</emphasis> physics.
  </para>

  <para>
    In terms of a video game, there are basically only two aspects of
    physics that are important&#58; gravity and collision.
  </para>

  <qandaset defaultlabel="gravity_q1">
    <qandaentry>
      <question>
	<para>
	  What is gravity?
	</para>
      </question>
      <answer>
	<para>Gravity is the tendency for objects with mass to be
	drawn toward one another. The larger the object, the more
	gravitational influence it exerts.</para>
      </answer>
    </qandaentry>
  </qandaset>

  <para>
    For your side-scroller to work, you must simulate gravity so that
    your player falls toward your game world&#39;s Earth.
  </para>
  
  <section id="gravity_function">
    <title>Adding a gravity function</title>

    <para>
      Remember that your player all ready has a property to determine
      motion. Use this property to pull the player sprite toward the
      bottom of the screen.
    </para>

  <qandaset defaultlabel="gravity_q2">
    <qandaentry>
      <question>
	<para>
	  Is the bottom of the screen a low number, like 0, or a high
	  number, like 720?
	</para>
      </question>
      <answer>
	<para>
	  In Pygame, higher numbers are closer to the bottom edge of
	  the screen.
	</para>
      </answer>
    </qandaentry>
  </qandaset>

  <para>
    In the real world, gravity affects everything. In platformers,
    however, gravity is selective because if you add gravity to your entire
    game world, all of your platforms would fall to the
    ground. Instead, add gravity just to your player
    sprite. Specifically, add a <code>gravity</code> function in your
    Player class.
  </para>

<programlisting>
    def gravity(self):
        self.momentumY += 3.2   # how fast player falls

	if self.rect.y > 960 and self.momentumY >= 0:
            self.momentumY = 0
</programlisting>

<para>
  This is a simple function. First, you set your player in vertical motion
  whether your player wants to be in motion or not. In other words,
  you have programmed your player to always be falling&#59; that&#39;s gravity.
</para>  

  <qandaset defaultlabel="gravity_q3">
    <qandaentry>
      <question>
	<para>
	  If you launch your game now, will gravity work?
	</para>
      </question>
      <answer>
	<para>
	  No, because the function hasn't been called in the main loop.
	</para>
      </answer>
    </qandaentry>
  </qandaset>

  <para>
    For the gravity function to have an effect, you must call it in
    your main loop. This way, Python will apply the falling motion to
    your player once every clock tick.
  </para>

  <para>
    In this code, add the middle line to your loop&#58;
  </para>
  
<programlisting>
    platform_list.draw(screen)
    player.gravity()   # check gravity
    player.update()
</programlisting>

<para>
  Launch your game now to see what happens. Look sharp, because it
  happens fast&#58; your player falls out of the sky, right off of
  your game screen.
</para>

<para>
  Your gravity simulation is working, but maybe too well.
</para>

<note>
<para>
  As an experiment, you can try changing the rate at which your player
  falls, but return the gravity to its original value before
  continuing.
</para>
</note>

  </section>
  
<section id="gravity_floor">
  <title>Adding a floor to gravity</title>

  <para>
    The problem with your character falling off the world is that
    there&#39;s no way for your game to detect it. In some games, if a
    player falls off the world, the sprite is deleted and respawned
    somewhere new. In other games, the player loses points, or a
    life. Whatever you want to have happen when a player falls off the
    world, you have to be able to detect when the player has
    disappeared off screen.
  </para>    

  <qandaset defaultlabel="gravity_floor-q1">
    <qandaentry>
      <question>
	<para>
	  What code block do you use to check for a condition in Scratch?
	</para>
      </question>
      <answer>
	<para>
	  Forever if, if, or if&#47;then.
	</para>
      </answer>
    </qandaentry>
  </qandaset>

  <para>
    In Python, to check for a condition, you can use an
    <firstterm>if</firstterm> statement.
  </para>

  <para>
    You must check to see if your player is falling, and how far your
    player has fallen. If your player has fallen so far that it has
    reached the bottom of the screen, then you can do
    <emphasis>something</emphasis>. To keep things simple, just set
    the position of the player sprite to 20 pixels above the bottom
    edge.
  </para>

  <para>
    Make your gravity function look like this&#58;
  </para>
  
<programlisting>
    def gravity(self):
        self.momentumY += 3.2    # how fast player falls

        if self.rect.y > screenY and self.momentumY >= 0:
            self.momentumY     = 0
            self.rect.y        = screenY-20    
</programlisting>

<para>
  And then launch your game. Your sprite should bounce at the bottom
  of the screen.
</para>

<para>
  What your player really needs is a way to fight gravity. The problem
  with gravity is, you can fight it unless you have something to push
  off of. In the next chapter, you will add collisions, and the
  ability to jump, to your game.
</para>
  
</section>
</chapter>
