<chapter id="enemy">
  <title>
    Looting
  </title>

  <para>
    At this point, you now know all the basics to program video game
    mechanics. You can build upon these basics to create a
    fully-functional video game all your own. As an example of how to
    leverage what you already know for new purposes, this chapter
    covers how to implement a looting system using what you already
    know about platforms.
  </para>
  
  <para>
    In most video games, you have the opportunity to &#34;loot&#34;,
    or collect treasures and other items within the game world. Loot
    usually increases your score, or your health, or they provide
    information leading you to your next quest.
  </para>

  <para>
    Including loot in your game is similar to programming
    platforms. Like platforms, loot has no user controls, loot scrolls
    with the game world, and must check for collisions with the player
    sprite. 
  </para>
      
<section id="loot_function">
  <title>
    Creating the loot function
  </title>
  
  <para>
    Loot is so similar to platforms that you don&#39;t even need a
    Loot class. You can just reuse the Platform class and call the
    results loot.
  </para>
  
  <para>
    Since loot type and placement probably differs from
    level to level, create a new function called <code>loot1</code>
    just under your <code>level1</code> function. 
  </para>

  <para>
    Since loot items are not actual platforms, you must also create a
    new <code>loot_list</code> group, and add loot objects to
    it. You&#39;ll use this group when checking for collisions.
  </para>

<programlisting>
def loot1():
    loot_list = pygame.sprite.Group()
    loot = Platform(666,355,92,99, os.path.join('images','loot.png'))
    loot_list.add(loot)
    return loot_list
</programlisting>

<para>
  You can add as many loot objects as you like, just remember to add
  them each to the group. Placement of loot can be just as complex as
  mapping platforms, so use your level design you used to map out your
  platforms.
</para>

<para>
  Call the function in the Setup section of your script. In the
  following code, the first two lines are for context, so add the third&#58;
</para>

<programlisting>
backdropRect  = screen.get_rect()
platform_list = level1()
loot_list     = loot1()  # spawn loot
</programlisting>

<para>
  As you know by now, the loot won't get drawn to the screen unless
  you include it in your main loop. Add the middle line from the
  following code sample to your loop&#58;
</para>

<programlisting>
    platform_list.draw(screen)
    loot_list.draw(screen) # refresh loot
    player.gravity()
</programlisting>

<para>
  Launch your game to see what happens.
</para>

<para>
  Your loot objects are spawned, but they don&#39;t do anything when
  your player runs into them, nor do they scroll when your player runs
  past them. Fix these issues next.
</para>
</section>

<section id="loot_scroll">
  <title>Scrolling loot</title>

  <para>
    Like platforms, loot has to scroll when the player moves through
    the game world. The logic is identical to platform scrolling. To
    scroll the forward, add the last two lines&#58;
  </para>

<programlisting>
        for platform in platform_list:
            platform.rect.x -= scroll
        for loot in loot_list:    # scroll loot
            loot.rect.x -= scroll # scroll loot
</programlisting>

<para>
  To scroll backward, add the last two lines&#58;
</para>

<programlisting>
        for platform in platform_list:
            platform.rect.x += scroll
        for loot in loot_list:
	    loot.rect.x += scroll
</programlisting>

<para>
  Launch your game again to see that your loot objects now act like
  they&#39;re <emphasis>in</emphasis> the game world instead of just
  painted on top of it.
</para>
</section>

<section id="loot_collision">
  <title>Detecting collisions</title>

  <para>
    Like platforms, you can check for collisions between loot and your
    player. The logic is the same as platform collisions, except that
    a hit doesn't affect gravity. Instead, a hit causes the loot to
    disappear and increment the player&#39;s score.
  </para>

    <mediaobject>
    <info>
      <othercredit>
	<orgname>MakerBox</orgname>
      </othercredit>
      <othercredit>
	<orgname>MIT</orgname>
      </othercredit>
    </info>
    <alt>Looting in Scratch</alt>
    <imageobject>
      <imagedata align="left" width="4.3in" format="JPG"
		 fileref="images/loot.jpg"/>
    </imageobject>
    <textobject>
      <para>
	Looting in Scratch increments the score and hides the loot.
      </para>
    </textobject>
  </mediaobject>

  <para>
    When your player touches a loot object, you can remove that object
    from the <code>loot_list</code>. That means that when your main
    loop redraws all loot items in <code>loot_list</code>, it
    won&#39;t redraw that particular object, so it looks like the
    player has picked up the loot. 
  </para>

  <para>
    Add the following code above the platform collision detection. The
    last line is for context&#58;
  </para>

<programlisting>
        loot_hit_list = pygame.sprite.spritecollide(self, loot_list, False)
        for loot in loot_hit_list:
            loot_list.remove(loot)
            self.score += 1
	    print(self.score)

	block_hit_list = pygame.sprite.spritecollide(self, platform_list, False)
</programlisting>

<para> Not only do you remove the loot object from its group when a
collision happens, you award your player with a bump in score. You
haven't created a score variable yet, so add that to your player&#39;s
properties. In the following code, first two lines are for context, so
just add the score variable&#58;
</para>

<programlisting>
        self.momentumY = 0
        self.frame     = 0
	self.score     = 0
</programlisting>

<para>
  As with platforms, you have to tell the <code>update</code> function
  which list to use when detecting collisions.
</para>

<programlisting>
    def update(self,platform_list,loot_list):
</programlisting>  

<para>
  When calling the <code>update</code> function in your main loop,
  include the <code>loot_list</code>&#58;
</para>

<programlisting>
    player.gravity()
    player.update(platform_list,loot_list) # refresh player
</programlisting>

<para>
  As you can see, you&#39;ve learned got all the basics. All you have
  to do now is use what you know in new ways. 
</para>

</section>
</chapter>
